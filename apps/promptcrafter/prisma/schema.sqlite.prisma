// Prisma schema for Electron (standalone) build using SQLite
// This lives alongside the MySQL schema (schema.prisma) without replacing it.
// Generation script: npm run prisma:generate:electron

generator client {
  provider = "prisma-client-js"
  // Output a separate client so we don't collide with the default one.
  output   = "../src/server/generated/electron"
  binaryTargets = ["native"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

model Account { // retained for structural similarity; unused in local mode
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session { // unused locally
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  presets       PromptPreset[]
  chats         Chat[]
}

model VerificationToken { // unused locally
  identifier String
  token      String @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AppSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PromptPreset {
  id        String   @id @default(cuid())
  userId    String
  name      String
  mode      String
  taskType  String
  options   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
}

model Chat {
  id        String   @id @default(cuid())
  userId    String
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messages  ChatMessage[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, updatedAt])
}

model ChatMessage {
  id        String   @id @default(cuid())
  chatId    String
  role      String
  content   String
  createdAt DateTime @default(now())

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId, createdAt])
}
